# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LadmcoluvDialog
                                 A QGIS plugin
 Plugin de Qgis para la evaluación de calidad en el proceso de captura y mantenimiento de datos conformes con el modelo LADM-COL
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-06
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Escuela de Ingenieria Civil y Geomática - Universidad del Valle

        email                : areageomatica@correounivalle.edu.co 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import (QgsProject, QgsVectorLayer)
from PyQt5.QtWidgets import (QTabWidget, QTableWidgetItem, QTableWidget, QAbstractScrollArea)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ladm_col_uv_dialog_base.ui'))


class LadmcoluvDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LadmcoluvDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        global capas
        global nom_capas
        nom_capas=list()
        capas=list()

        self.file_load.fileChanged.connect(self.revisar)
        self.Bt_vis.clicked.connect(self.visualizar)
        self.Bt_res.clicked.connect(self.restaurar)

    def revisar(self):
        arc=self.file_load.filePath()
        ruta=os.path.split(arc)
        fichero=ruta[1]
        ubi=ruta[0]
        ext=os.path.splitext(fichero)

        todo=ubi+"-"+fichero+"-"+ext[1]+"-"

        if ext[1]==".gpkg":
            self.view1.setText(str("Se ha identificado un archivo geopackage"))

        if os.path.isfile(os.path.join(ubi, fichero)):
            layer = QgsVectorLayer(arc,"test","ogr")
            subLayers =layer.dataProvider().subLayers()

            for subLayer in subLayers:
                name = subLayer.split('!!::!!')[1]
                uri = "%s|layername=%s" % (arc, name,)
                #Create layer
                sub_vlayer = QgsVectorLayer(uri, name, 'ogr')
                capas.append(sub_vlayer)
                nom_capas.append(name)

            self.tb_capas.clear()
            self.tb_capas.setRowCount(len(nom_capas))
            self.tb_capas.setColumnCount(4)            
            self.tb_capas.setHorizontalHeaderItem(0, QTableWidgetItem("Entidad"))
            self.tb_capas.setHorizontalHeaderItem(1, QTableWidgetItem("Tipo"))
            self.tb_capas.setHorizontalHeaderItem(2, QTableWidgetItem("Validación"))
            self.tb_capas.setHorizontalHeaderItem(3, QTableWidgetItem("Eliminar"))

            tb_capas = QTableWidget()
            self.tb_capas.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
            self.tb_capas.setColumnWidth(0,200)
            self.tb_capas.setColumnWidth(1,200)
            self.tb_capas.resizeColumnToContents(2)

            fila = 0
            for registro in nom_capas:
                celda = QTableWidgetItem(registro)
                tipo_arc=QTableWidgetItem(str(capas[fila].type()))
                self.tb_capas.setItem(fila,0,celda)
                self.tb_capas.setItem(fila,1,tipo_arc)
                fila +=1

        if (len(nom_capas))>0:
            self.Bt_res.setEnabled(True)
            self.Bt_val.setEnabled(True)
            self.Bt_vis.setEnabled(True) 


    def visualizar(self):
        #Add layer to map
        for registro in capas:
            QgsProject.instance().addMapLayer(registro, True)
    

    def restaurar(self):
        nom_capas.clear()
        capas.clear()
        self.view1.setText("")
        self.tb_capas.clear()


